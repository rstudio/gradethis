% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipe_warning.R
\name{pipe_warning}
\alias{pipe_warning}
\title{Inform the user about how gradethis interprets piped code}
\usage{
pipe_warning(message = getOption("gradethis.pipe_warning"), .user_code = NULL)
}
\arguments{
\item{message}{A glue string containing the message. The default value is set
with the \code{gradethis.pipe_warning} option.}

\item{.user_code}{The user's submitted code, found in \code{env} if \code{NULL}}
}
\value{
Returns a string containing the pipe warning message, or an empty
string if the \code{.user_code} does not contain a pipe, if the \code{.user_code} is
also empty, or if the \code{message} is \code{NULL}.
}
\description{
Creates a warning message when user code contains the \verb{\%>\%}. When feedback
is automatically generated via \code{\link[=code_feedback]{code_feedback()}} or in \code{\link[=grade_this_code]{grade_this_code()}},
this message attempts to contextualize feedback that might make more sense
when referenced against an un-piped version of the student's code.
}
\section{Options}{

\itemize{
\item \code{gradethis.pipe_warning}: The default pipe warning message is set via this
option.
}
}

\section{Glue Variables}{


The following variables may be used in the glue-able \code{message}:
\itemize{
\item \code{.user_code}: The student's original submitted code.
\item \code{.user_code_unpiped}: The unpiped version of the student's submitted code.
}
}

\examples{
# The default `pipe_warning()` message:
getOption("gradethis.pipe_warning")

# Let's consider two versions of the user code
user_code <-  "penguins \%>\% pull(year) \%>\% min(year)"
user_code_unpiped <- "min(pull(penguins, year), year)"

# A `pipe_warning()` is created when the user's code contains `\%>\%`
pipe_warning(.user_code = user_code)

# And no message is created when the user's code in un-piped
pipe_warning(.user_code = user_code_unpiped)

# Typically, this warning is only introduced when giving code feedback
# for an incorrect submission. Here we didn't expect `year` in `min()`.
submission <- mock_this_exercise(
  .user_code = !!user_code,
  .solution_code = "penguins \%>\% pull(year) \%>\% min()"
)

grade_this_code()(submission)
}
