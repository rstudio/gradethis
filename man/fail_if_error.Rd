% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graded.R
\name{fail_if_error}
\alias{fail_if_error}
\title{Fail if grading code produces an error}
\usage{
fail_if_error(
  expr,
  message = "{.error_message}",
  ...,
  env = parent.frame(),
  hint = TRUE,
  encourage = getOption("gradethis.fail.encourage", FALSE)
)
}
\arguments{
\item{expr}{An expression to evaluate that whose errors are safe to be
converted into failing grades with \code{\link[=fail]{fail()}}.}

\item{message}{A glue string containing the feedback message to be returned
to the user. Additional \code{.error} and \code{.error_message} objects are made
available for use in the message.}

\item{...}{Additional arguments passed to \code{graded()} or additional data to be
included in the feedback object.}

\item{env}{environment to evaluate the glue \code{message}. Most users of
\pkg{gradethis} will not need to use this argument.}

\item{hint}{Include a code feedback hint with the failing message? This
argument only applies to \code{fail()} and \code{fail_if_equal()} and the message is
added using the default options of \code{\link[=give_code_feedback]{give_code_feedback()}} and
\code{\link[=maybe_code_feedback]{maybe_code_feedback()}}. The default value of \code{hint} can be set using
\code{\link[=gradethis_setup]{gradethis_setup()}} or the \code{gradethis.fail.hint} option.}

\item{encourage}{Incude a random encouraging phrase with
\code{\link[=random_encouragement]{random_encouragement()}}? The default value of \code{encourage} can be set
using \code{\link[=gradethis_setup]{gradethis_setup()}} or the \code{gradethis.fail.encourage} option.}
}
\value{
If an error occurs while evaluating \code{expr}, the error is returned as
a \code{\link[=fail]{fail()}} grade. Otherwise, no value is returned.
}
\description{
When grading code involves unit-style testing, you may want to use
\pkg{testthat} expectation function to test the user's submitted code. In
these cases, to differentiate between expected errors and internal errors
indicative of issues with the grading code, \pkg{gradethis} requires that
authors wrap assertion-style tests in \code{fail_if_error()}. This function
catches any errors and converts them into \code{\link[=fail]{fail()}} grades. It also makes the
error and its message available for use in the \code{message} glue string as
\code{.error} and \code{.error_message} respectively.
}
\examples{
# The user is asked to add 2 + 2, but they take a shortcut
ex <- mock_this_exercise("'4'")

# Normally, grading code with an author error returns an internal problem grade
grade_author_mistake <- grade_this({
  if (identical(4)) {
    pass("Great work!")
  }
  fail()
})(ex)

# This returns a "problem occurred" grade
grade_author_mistake
# ...that also includes information about the error (not shown to users)
grade_author_mistake$error

# But sometimes we'll want to use unit-testing helper functions where we know
# that an error is indicative of a problem in the users' code
grade_this({
  fail_if_error({
    testthat::expect_length(.result, 1)
    testthat::expect_true(is.numeric(.result))
    testthat::expect_equal(.result, 4)
  })
  pass("Good job!")
})(ex)

# Note that you don't need to reveal the error message to the user
grade_this({
  fail_if_error(
    message = "Your result isn't a single numeric value.", 
    {
      testthat::expect_length(.result, 1)
      testthat::expect_true(is.numeric(.result))
      testthat::expect_equal(.result, 4)
    }
  )
  pass("Good job!")
})(ex)

}
\seealso{
Other grading helper functions: \code{\link[=graded]{graded()}}, \code{\link[=pass]{pass()}}, \code{\link[=fail]{fail()}},
\code{\link[=pass_if]{pass_if()}}, \code{\link[=fail_if]{fail_if()}}, \code{\link[=pass_if_equal]{pass_if_equal()}}, \code{\link[=fail_if_equal]{fail_if_equal()}}.
}
