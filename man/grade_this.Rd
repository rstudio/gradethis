% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grade_this.R
\name{grade_this}
\alias{grade_this}
\title{Grade a student's submission using custom logic}
\usage{
grade_this(
  expr,
  ...,
  maybe_code_feedback = getOption("gradethis.maybe_code_feedback", TRUE)
)
}
\arguments{
\item{expr}{The grade-checking expression to be evaluated. This expression
must either signal a grade via \code{\link[=pass]{pass()}} or \code{\link[=fail]{fail()}} functions or throw an
error (via \pkg{testthat} or \code{\link[=stop]{stop()}}). By default, errors are converted to
\code{\link[=fail]{fail()}} calls and will use the error message as the feedback \code{message}.
You can change this behavior by setting \code{fail_on_error = FALSE} in
\code{\link[=gradethis_setup]{gradethis_setup()}}.}

\item{...}{Ignored}

\item{maybe_code_feedback}{Should \code{maybe_code_feedback()} provide code
feedback when used in a \code{\link[=graded]{graded()}} message? The default value can be set
with \code{\link[=gradethis_setup]{gradethis_setup()}}.

Typically, \code{\link[=maybe_code_feedback]{maybe_code_feedback()}} is called in the default \code{\link[=fail]{fail()}}
message (the default can be customized the \code{fail} argument of
\code{\link[=gradethis_setup]{gradethis_setup()}}). If the \code{maybe_code_feedback} argument is \code{FALSE},
\code{maybe_code_feedback()} returns an empty string.}
}
\value{
Returns a function whose first parameter will be an environment
containing objects specific to the exercise and submission (see \strong{Available
variables}). For local testing, you can create a version of the expected
environment for a mock exercise submission with \code{\link[=mock_this_exercise]{mock_this_exercise()}}.
Calling the returned function on the exercise-checking environment will
evaluate the grade-checking \code{expr} and return a final grade via \code{\link[=graded]{graded()}}.
}
\description{
\code{grade_this()} allows instructors to write custom logic to evaluate, grade
and give feedback to students. To use \code{grade_this()}, call it directly in
your \verb{*-check} chunk:

\if{html}{\out{<div class="sourceCode">}}\preformatted{```\{r example-check\}
grade_this(\{
  # custom checking code appears here
  if (identical(.result, .solution)) \{
    pass("Great work!")
  \}
  fail("Try again!")
\})
```
}

\if{html}{\out{</div>}}

\code{grade_this()} makes available a number of objects based on the exercise and
the student's submission that can be used to evaluate the student's submitted
code. See \code{?"grade_this-objects"} for more information about these objects.

As the instructor, you are free to use any logic to determine a student's
grade as long as a \code{\link[=graded]{graded()}} object is signaled. The check code can also
contain \pkg{testthat} expectation code. Failed \pkg{testthat} expectations
will be turned into \code{\link[=fail]{fail()}}ed grades with the corresponding message.

A final grade is signaled from \code{grade_this()} using the \code{\link[=graded]{graded()}} helper
functions, which include \code{\link[=pass]{pass()}}, \code{\link[=fail]{fail()}}, among others. \code{grade_this()}
uses condition handling to short-circuit further evaluation when a grade is
reached. This means that you may also signal a failing grade using any of the
\verb{expect_*()} functions from \pkg{testthat}, other functions designed to work
with \pkg{testthat}, such as \pkg{checkmate}, or standard R errors via
\code{stop()}. Learn more about this behavior in \code{\link[=graded]{graded()}} in the section
\strong{Return a grade immediately}.
}
\examples{
# For an interactive example run: gradethis_demo()

# Suppose we have an exercise that prompts students to calculate the
# average height of Loblolly pine trees using the `Loblolly` data set.
# We might write an exercise `-check` chunk like the one below.
# 
# Since grade_this() returns a function, we'll save the result of this
# "chunk" as `grader()`, which can be called on an exercise submission
# to evaluate the student's code, which we'll simulate with
# `mock_this_exercise()`.

grader <- 
# ```{r example-check}
  grade_this({
    if (length(.result) != 1) {
      fail("I expected a single value instead of {length(.result)} values.")
    }
    
    if (is.na(.result)) {
      fail("I expected a number, but your code returned a missing value.")
    }
    
    avg_height <- mean(Loblolly$height)
    if (identical(.result, avg_height)) {
      pass("Great work! The average height is {round(avg_height, 2)}.")
    }
    
    # Always end grade_this() with a default grade.
    # By default fail() will also give code feedback, 
    # if a solution is available.
    fail()
  })
# ```

# Simulate an incorrect answer: too many values...
grader(mock_this_exercise(.user_code = Loblolly$height[1:2]))

# This student submission returns a missing value...
grader(mock_this_exercise(mean(Loblolly$Seed)))
# This student submission isn't caught by any specific tests,
# the final grade is determined by the default (last) value in grade_this()
grader(mock_this_exercise(mean(Loblolly$age)))

# If you have a *-solution chunk, 
# fail() without arguments gives code feedback...
grader(
  mock_this_exercise(
    .user_code = mean(Loblolly$age),
    .solution_code = mean(Loblolly$height)
  )
)

# Finally, the "student" gets the correct answer!
grader(mock_this_exercise(mean(Loblolly$height)))

}
\seealso{
\code{\link[=grade_this_code]{grade_this_code()}}, \code{\link[=mock_this_exercise]{mock_this_exercise()}}, \code{\link[=gradethis_demo]{gradethis_demo()}}
}
