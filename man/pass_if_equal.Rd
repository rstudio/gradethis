% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graded.R
\name{pass_if_equal}
\alias{pass_if_equal}
\alias{fail_if_equal}
\title{Signal a passing or failing grade if two values are equal}
\usage{
pass_if_equal(
  y = .solution,
  message = getOption("gradethis.pass", "Correct!"),
  x = .result,
  ...,
  env = parent.frame(),
  tolerance = sqrt(.Machine$double.eps),
  praise = getOption("gradethis.pass.praise", FALSE)
)

fail_if_equal(
  y,
  message = getOption("gradethis.fail", "Incorrect"),
  x = .result,
  ...,
  env = parent.frame(),
  tolerance = sqrt(.Machine$double.eps),
  hint = getOption("gradethis.fail.hint", FALSE),
  encourage = getOption("gradethis.fail.encourage", FALSE)
)
}
\arguments{
\item{y}{The expected value against which \code{x} is compared using
\code{waldo::compare(x, y)}.

In \code{pass_if_equal()}, if no value is provided, the exercise \code{.solution}
(i.e. the result of evaluating the code in the exercise's \verb{*-solution}
chunk) will be used for the comparison.

If the exercise uses multiple solutions with \emph{different results}, set
\code{y = .solution_all}. In this case, \code{pass_if_equal()} will test each of the
solutions and provide a passing grade if \code{x} matches \emph{any} values contained
in \code{y}. Note that if the exercise has multiple solutions but they all
return the same result, it will be faster to use the default value of
\code{y = .solution}.}

\item{message}{A character string of the message to be displayed. In all
grading helper functions other than \code{\link[=graded]{graded()}}, \code{message} is a template
string that will be processed with \code{\link[glue:glue]{glue::glue()}}.}

\item{x}{First item in the comparison. By default, when used inside
\code{\link[=grade_this]{grade_this()}}, \code{x} is automatically assigned the value of \code{.result} â€” in
other words the result of running the student's submitted code. \code{x} is not
the first argument since you will often want to compare the final value of
the student's submission against a specific value, \code{y}.}

\item{...}{Additional arguments passed to \code{\link[=graded]{graded()}}}

\item{env}{environment to evaluate the glue \code{message}. Most users of
\pkg{gradethis} will not need to use this argument.}

\item{tolerance}{If non-\code{NULL}, used as threshold for ignoring small
floating point difference when comparing numeric vectors. Setting to
any non-\code{NULL} value will cause integer and double vectors to be compared
based on their values, rather than their types.

It uses the same algorithm as \code{\link[=all.equal]{all.equal()}}, i.e., first we generate
\code{x_diff} and \code{y_diff} by subsetting \code{x} and \code{y} to look only locations
with differences. Then we check that
\code{mean(abs(x_diff - y_diff)) / mean(abs(y_diff))} (or just
\code{mean(abs(x_diff - y_diff))} if \code{y_diff} is small) is less than
\code{tolerance}.}

\item{praise}{Include a random praising phrase with \code{\link[=random_praise]{random_praise()}}? The
default value of \code{praise} can be set using \code{\link[=gradethis_setup]{gradethis_setup()}} or the
\code{gradethis.pass.praise} option.}

\item{hint}{Include a code feedback hint with the failing message? This
argument only applies to \code{fail()} and \code{fail_if_equal()} and the message is
added using the default options of \code{\link[=give_code_feedback]{give_code_feedback()}} and
\code{\link[=maybe_code_feedback]{maybe_code_feedback()}}. The default value of \code{hint} can be set using
\code{\link[=gradethis_setup]{gradethis_setup()}} or the \code{gradethis.fail.hint} option.}

\item{encourage}{Include a random encouraging phrase with
\code{\link[=random_encouragement]{random_encouragement()}}? The default value of \code{encourage} can be set
using \code{\link[=gradethis_setup]{gradethis_setup()}} or the \code{gradethis.fail.encourage} option.}
}
\value{
Returns a passing or failing grade if \code{x} and \code{y} are equal.
}
\description{
\code{pass_if_equal()} and \code{fail_if_equal()} are two \code{\link[=graded]{graded()}} helper functions
that signal a passing or a failing grade if two values are equal. They are
designed to easily compare the returned value of the student's submitted
code with the value returned by the solution or another known value:
\itemize{
\item Both functions find and use \code{.result} as the default for \code{x}, the first
item in the comparison. \code{.result} is the last value returned from the
user's submitted code.
\item \code{pass_if_equal()} additionally finds and uses \code{.solution} as the default
expected value \code{y}.
}

See \code{\link[=graded]{graded()}} for more information on \pkg{gradethis} grade-signaling
functions.
}
\section{Functions}{
\itemize{
\item \code{pass_if_equal}: Signal a \emph{passing} grade only if \code{x} and \code{y} are
equal.

\item \code{fail_if_equal}: Signal a \emph{failing} grade only if \code{x} and \code{y} are
equal.
}}

\section{Comparing with Multiple Solutions}{

By default, \code{pass_if_equal()} will compare with \code{.solution}, or the final
value returned by the entire \code{-solution} chunk (in other words, the last
solution). This default behavior covers exercises with a single solution and
exercises with multiple solutions that all return the same value.

When your exercise has \strong{multiple solutions with different results},
\code{pass_if_equal()} can compare the student's result to each of the solutions
to return a passing grade when the result matches any of the values returned
by the set of solutions. You can opt into this behavior by calling\if{html}{\out{<div class="sourceCode r">}}\preformatted{pass_if_equal(.solution_all)
}\if{html}{\out{</div>}}

Note that this causes \code{pass_if_equal()} to evaluate each of the solutions in
the set, and may increase the computation time.

Here's a small example. Suppose an exercise asks students to filter \code{mtcars}
to include only cars with the same number of cylinders. Students are free to
pick cars with 4, 6, or 8 cylinders, and so your \code{-solution} chunk would
include this code:\if{html}{\out{<div class="sourceCode r">}}\preformatted{ex_solution <- "
# four cylinders ----
mtcars[mtcars$cyl == 4, ]

# six cylinders ----
mtcars[mtcars$cyl == 6, ]

# eight cylinders ----
mtcars[mtcars$cyl == 8, ]
"
}\if{html}{\out{</div>}}

In the \code{-check} chunk, you'd call \code{\link[=grade_this]{grade_this()}} and ask \code{pass_if_equal()} to
compare the student's result to all of the solutions.\if{html}{\out{<div class="sourceCode r">}}\preformatted{ex_check <- grade_this(\{
  pass_if_equal(
    y = .solution_all,
    message = "The cars in your result all have \{.solution_label\}!"
   )

  fail()
\})
}\if{html}{\out{</div>}}

What happens when a student submits one of these solutions? This function
below mocks the process of a student submitting an attempt.\if{html}{\out{<div class="sourceCode r">}}\preformatted{student_submits <- function(code) \{
  submission <- mock_this_exercise(!!code, !!ex_solution)
  ex_check(submission)
\}
}\if{html}{\out{</div>}}

If they submit code that returns one of the three possible solutions, they
receive positive feedback.\if{html}{\out{<div class="sourceCode r">}}\preformatted{student_submits("mtcars[mtcars$cyl == 4, ]")
}\if{html}{\out{</div>}}\preformatted{## <gradethis_graded: [Correct]
##   The cars in your result all have four cylinders!
## >
}\if{html}{\out{<div class="sourceCode r">}}\preformatted{student_submits("mtcars[mtcars$cyl == 6, ]")
}\if{html}{\out{</div>}}\preformatted{## <gradethis_graded: [Correct]
##   The cars in your result all have six cylinders!
## >
}

Notice that the solution label appears in the feedback message. When
\code{pass_if_equal()} picks a solution as correct, three variables are made
available for use in the glue string provided to \code{message}:
\itemize{
\item \code{.solution_label}: The heading label of the matching solution
\item \code{.solution_code}: The code of the matching solution
\item \code{.solution}: The value of the evaluated matching solution code
}

If the student submits incorrect code, \code{pass_if_equal()} defers to later
grading code.\if{html}{\out{<div class="sourceCode r">}}\preformatted{student_submits("mtcars[mtcars$cyl < 8, ]")
}\if{html}{\out{</div>}}\preformatted{## <gradethis_graded: [Incorrect]
##   Incorrect. In `mtcars[mtcars$cyl < 8, ]`, I expected you to call `==`
##   where you called `<`. Let's try it again.
## >
}

Here, because \code{\link[=fail]{fail()}} provides \code{\link[=code_feedback]{code_feedback()}} by default, and because
\code{\link[=code_feedback]{code_feedback()}} is also aware of the multiple solutions for this exercise,
the code feedback picks the \emph{eight cylinders} solution and gives advice
based on that particular solution.
}

\examples{
# Suppose our prompt is to find the cars in `mtcars` with 6 cylinders...

grader <-
  # ```{r example-check}
  grade_this({
    # Automatically pass if .result equal to .solution
    pass_if_equal()

    fail_if_equal(mtcars[mtcars$cyl == 4, ], message = "Not four cylinders")
    fail_if_equal(mtcars[mtcars$cyl == 8, ], message = "Not eight cylinders")

    # Default to failing grade with feedback
    fail()
  })
# ```

.solution <-
  # ```{r example-solution}
  mtcars[mtcars$cyl == 6, ]
# ```

# Correct!
grader(mock_this_exercise(mtcars[mtcars$cyl == 6, ], !!.solution))

# These fail with specific messages
grader(mock_this_exercise(mtcars[mtcars$cyl == 4, ], !!.solution))
grader(mock_this_exercise(mtcars[mtcars$cyl == 8, ], !!.solution))

# This fails with default feedback message
grader(mock_this_exercise(mtcars[mtcars$mpg == 8, ], !!.solution))
}
\seealso{
Other grading helper functions: \code{\link[=graded]{graded()}}, \code{\link[=pass]{pass()}}, \code{\link[=fail]{fail()}},
\code{\link[=pass_if]{pass_if()}}, \code{\link[=fail_if]{fail_if()}}, \code{\link[=pass_if_equal]{pass_if_equal()}}, \code{\link[=fail_if_equal]{fail_if_equal()}}.
}
