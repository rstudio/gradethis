% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graded.R
\name{fail_if_code_feedback}
\alias{fail_if_code_feedback}
\title{Signal a failing grade if mistakes are detected in the submitted code}
\usage{
fail_if_code_feedback(
  message = NULL,
  user_code = .user_code,
  solution_code = .solution_code_all,
  ...,
  env = parent.frame(),
  hint = TRUE,
  encourage = getOption("gradethis.fail.encourage", FALSE),
  allow_partial_matching = getOption("gradethis.allow_partial_matching", TRUE)
)
}
\arguments{
\item{message}{A character string of the message to be displayed. In all
grading helper functions other than \code{\link[=graded]{graded()}}, \code{message} is a template
string that will be processed with \code{\link[glue:glue]{glue::glue()}}.}

\item{user_code, solution_code}{String containing user or solution code. By
default, when used in \code{\link[=grade_this]{grade_this()}}, \link{.user_code} is retrieved for the
\link{.user_code}. \code{solution_code} may also be a list containing multiple
solution variations, so by default in \code{\link[=grade_this]{grade_this()}} \link{.solution_code_all}
is found and used for \code{solution_code}. You may also use \code{.solution_code} if
there is only one solution.}

\item{...}{
  Arguments passed on to \code{\link[=graded]{graded}}
  \describe{
    \item{\code{correct}}{A logical value of whether or not the checked code is correct.}
    \item{\code{type,location}}{The \code{type} and \code{location} of the feedback object
provided to \pkg{learnr}. See
\url{https://rstudio.github.io/learnr/exercises.html#Custom_checking} for more
details.

\code{type} may be one of "auto", "success", "info", "warning", "error", or
"custom".

\code{location} may be one of "append", "prepend", or "replace".}
  }}

\item{env}{Environment used to standardize formals of the user and solution
code. Defaults to retrieving \link{.envir_prep} from the calling environment. If
not found, the \code{\link[=parent.frame]{parent.frame()}} will be used.}

\item{hint}{Include a code feedback hint with the failing message? This
argument only applies to \code{fail()} and \code{fail_if_equal()} and the message is
added using the default options of \code{\link[=give_code_feedback]{give_code_feedback()}} and
\code{\link[=maybe_code_feedback]{maybe_code_feedback()}}. The default value of \code{hint} can be set using
\code{\link[=gradethis_setup]{gradethis_setup()}} or the \code{gradethis.fail.hint} option.}

\item{encourage}{Include a random encouraging phrase with
\code{\link[=random_encouragement]{random_encouragement()}}? The default value of \code{encourage} can be set
using \code{\link[=gradethis_setup]{gradethis_setup()}} or the \code{gradethis.fail.encourage} option.}

\item{allow_partial_matching}{A logical. If \code{FALSE}, the partial matching of
argument names is not allowed and e.g. \code{runif(1, mi = 0)} will return a
message indicating that the full formal name \code{min} should be used. The
default is set via the \code{gradethis.allow_partial_matching} option, or by
\code{\link[=gradethis_setup]{gradethis_setup()}}.}
}
\value{
Signals an incorrect grade with feedback if there are differences
between the submitted user code and the solution code. If solution code is
not available, no grade is returned.
}
\description{
\code{fail_if_code_feedback()} uses \code{\link[=code_feedback]{code_feedback()}} to detect if there are
differences between the user's submitted code and the solution code (if
available). If the exercise does not have an associated solution, or if there
are no detected differences between the user's and the solution code, no
grade is returned.

See \code{\link[=graded]{graded()}} for more information on \pkg{gradethis} grade-signaling
functions.
}
\examples{
# Suppose the exercise prompt is to generate 5 random numbers, sampled from
# a uniform distribution between 0 and 1. In this exercise, you know that
# you shouldn't have values outside of the range of 0 or 1, but you'll
# otherwise need to check the submitted code to know that the student has
# chosen the correct sampling function.

grader <-
  # ```{r example-check}
  grade_this({
    fail_if(length(.result) != 5, "I expected 5 numbers.")
    fail_if(
      any(.result < 0 | .result > 1),
      "I expected all numbers to be between 0 and 1."
    )

    # Specific checks passed, but now we want to check the code.
    fail_if_code_feedback()

    # All good!
    pass()
  })
# ```

.solution_code <- "
# ```{r example-check}
  runif(5)
# ```
"

# Not 5 numbers...
grader(mock_this_exercise(runif(1), !!.solution_code))

# Not within [0, 1]...
grader(mock_this_exercise(rnorm(5), !!.solution_code))

# Passes specific checks, but hard to tell so check the code...
grader(mock_this_exercise(runif(5, 0.25, 0.75), !!.solution_code))
grader(mock_this_exercise(rbinom(5, 1, 0.5), !!.solution_code))

# Perfect!
grader(mock_this_exercise(runif(n = 5), !!.solution_code))
}
\seealso{
Other grading helper functions: \code{\link[=graded]{graded()}}, \code{\link[=pass]{pass()}}, \code{\link[=fail]{fail()}},
\code{\link[=pass_if]{pass_if()}}, \code{\link[=fail_if]{fail_if()}}, \code{\link[=pass_if_equal]{pass_if_equal()}}, \code{\link[=fail_if_equal]{fail_if_equal()}}.
}
