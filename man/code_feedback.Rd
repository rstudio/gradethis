% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/code_feedback.R
\name{code_feedback}
\alias{code_feedback}
\alias{maybe_code_feedback}
\alias{give_code_feedback}
\title{Provide automated code feedback}
\usage{
code_feedback(
  user_code = .user_code,
  solution_code = .solution_code,
  env = .envir_prep,
  ...,
  allow_partial_matching = getOption("gradethis.allow_partial_matching", TRUE)
)

maybe_code_feedback(
  user_code = get0(".user_code", parent.frame()),
  solution_code = get0(".solution_code", parent.frame()),
  env = get0(".envir_prep", parent.frame(), ifnotfound = parent.frame()),
  ...,
  allow_partial_matching = getOption("gradethis.allow_partial_matching", TRUE),
  default = "",
  before = getOption("gradethis.maybe_code_feedback.before", " "),
  after = getOption("gradethis.maybe_code_feedback.after", NULL),
  space_before = deprecated(),
  space_after = deprecated()
)

give_code_feedback(
  expr,
  ...,
  env = parent.frame(),
  location = c("after", "before")
)
}
\arguments{
\item{user_code, solution_code}{String containing user or solution code. For
ease of use in \code{grade_this()}, \code{.user_code} or \code{.solution_code} are by
default retrieved from the calling environment.}

\item{env}{Environment used to standardize formals of the user and solution
code. Defaults to retrieving \code{.envir_prep} from the calling environment. If
not found, the \code{\link[=parent.frame]{parent.frame()}} will be used.}

\item{...}{Ignored in \code{code_feedback()} and \code{maybe_code_feedback()}. In
\code{give_code_feedback()}, \code{...} are passed to \code{maybe_code_feedback()}.}

\item{allow_partial_matching}{A logical. If \code{FALSE}, the partial matching of
argument names is not allowed and e.g. \code{runif(1, mi = 0)} will return a
message indicating that the full formal name \code{min} should be used. The
default is set via the \code{gradethis.allow_partial_matching} option, or by
\code{\link[=gradethis_setup]{gradethis_setup()}}.}

\item{default}{Default value to return if no code feedback is found or code
feedback can be provided.}

\item{before, after}{Strings to be added before or after the code feedback
message to ensure the message is properly formatted in your feedback.}

\item{space_before, space_after}{Deprecated. Use \code{before} and \code{after}.}

\item{expr}{A grading function — like \code{\link[=grade_this]{grade_this()}} or \code{\link[=grade_result]{grade_result()}} —
or a character string. The code feedback will be appended to the message
of any incorrect grades using \code{\link[=maybe_code_feedback]{maybe_code_feedback()}}, set to always
include the code feedback, if possible. If \code{expr} is a character string,
\code{"{maybe_code_feedback()}"} is pasted into the string, without
customization.}

\item{location}{Should the code feedback message be added before or after?}
}
\value{
\itemize{
\item \code{code_feedback()} returns a character value describing the difference
between the student's submitted code and the solution. If no
discrepancies are found, \code{code_feedback()} returns \code{NULL}.
\item \code{maybe_code_feedback()} always returns a string for safe use in glue
strings. If no discrepancies are found, it returns an empty string.
\item \code{give_code_feedback()} catches \code{\link[=fail]{fail()}} grades and adds code feedback to
the feedback message using \code{maybe_code_feedback()}.
}
}
\description{
Generate a message describing the first instance of a code mismatch. Three
functions are provided for working with code feedback: \code{code_feedback()} does
the comparison and returns a character description of the mismatch, or a
\code{NULL} if no differences are found. \code{maybe_code_feedback()} is designed to be
used inside \code{\link[=fail]{fail()}} and related \code{\link[=graded]{graded()}} messages, as in
\code{"{maybe_code_feedback()}"}. And \code{give_code_feedback()} gives you a way to
add code feedback to any \code{\link[=fail]{fail()}} message in a \code{\link[=grade_this]{grade_this()}} or
\code{\link[=grade_result]{grade_result()}} checking function.
}
\section{Functions}{
\itemize{
\item \code{code_feedback}: Determine code feedback by comparing the user's
code to the solution.

\item \code{maybe_code_feedback}: Return \code{code_feedback()} result when possible.
Useful when setting default \code{\link[=fail]{fail()}} glue messages. For example, if there
is no solution, no code feedback will be given.

\item \code{give_code_feedback}: Appends \code{\link[=maybe_code_feedback]{maybe_code_feedback()}} to the
message generated by incorrect grades.
}}

\section{Code differences}{


There are many different ways that code can be different, yet still the same.
Here is how we detect code differences:
\enumerate{
\item If the single values are different. Ex: \code{log(2)} vs \code{log(3)}
\item If the function call is different. Ex: \code{log(2)} vs \code{sqrt(2)}
\item Validate the user code can be standardized via
\code{\link[rlang:call_standardise]{rlang::call_standardise()}}. The \code{env} parameter is important for this
step as \pkg{gradethis} does not readily know about user defined
functions. Ex: \code{read.csv("file.csv")} turns into
\code{read.csv(file = "file.csv")}
\item If multiple formals are matched. Ex: \code{read.csv(f = "file.csv")} has \code{f}
match to \code{file} and \code{fill}.
\item Verify that every named argument in the solution appears in the user
code. Ex: If the solution is \code{read.csv("file.csv", header = TRUE)},
\code{header} must exist.
\item Verify that the user did not supply extra named arguments to \code{...}.
Ex: \code{mean(x = 1:10, na.rm = TRUE)} vs \code{mean(x = 1:10)}
\item Verify that every named argument in the solution matches the value of the
corresponding user argument. Ex: \code{read.csv("file.csv", header = TRUE)}
vs \code{read.csv("file.csv", header = FALSE)}
\item Verify that the remaining arguments of the user and solution code match
in order and value. Ex: \code{mean(1:10, 0.1)} vs \code{mean(1:10, 0.2)}
}
}

\examples{
# code_feedback() ------------------------------------------------------

# Values are same, so no differences found
code_feedback("log(2)", "log(2)")

# Functions are different
code_feedback("log(2)", "sqrt(2)")

# Standardize argument names (no differences)
code_feedback("read.csv('file.csv')", "read.csv(file = 'file.csv')")

# Partial matching is not allowed
code_feedback("read.csv(f = 'file.csv')", "read.csv(file = 'file.csv')")

# Feedback will spot differences in argument values...
code_feedback(
  "read.csv('file.csv', header = FALSE)",
  "read.csv('file.csv', header = TRUE)"
)

# ...or when arguments are expected to appear in a call...
code_feedback("mean(1:10)", "mean(1:10, na.rm = TRUE)")

# ...even when the expected argument matches the function's default value
code_feedback("read.csv('file.csv')", "read.csv('file.csv', header = TRUE)")

# Unstandardized arguments will match by order and value
code_feedback("mean(1:10, 0.1)", "mean(1:10, 0.2)")


# give_code_feedback() -------------------------------------------------

# We'll use this example of an incorrect exercise submission throughout
submission_wrong <- mock_this_exercise(
  .user_code = "log(4)",
  .solution_code = "sqrt(4)"
)

# To add feedback to *any* incorrect grade,
# wrap the entire `grade_this()` call in `give_code_feedback()`:
grader <-
  # ```{r example-check}
  give_code_feedback(grade_this({
    pass_if_equal(.solution, "Good job!")
    if (.result < 2) {
      fail("Too low!")
    }
    fail()
  }))
# ```
grader(submission_wrong)

# Or you can wrap the message of any fail() directly:
grader <-
  # ```{r example-check}
  grade_this({
    pass_if_equal(.solution, "Good job!")
    if (.result < 2) {
      fail(give_code_feedback("Too low!"))
    }
    fail()
  })
# ```
grader(submission_wrong)

# Typically, grade_result() doesn't include code feedback
grader <-
  # ```{r example-check}
  grade_result(
    fail_if(~ round(.result, 0) != 2, "Not quite!")
  )
# ```
grader(submission_wrong)

# But you can use give_code_feedback() to append code feedback
grader <-
  # ```{r example-check}
  give_code_feedback(grade_result(
    fail_if(~ round(.result, 0) != 2, "Not quite!")
  ))
# ```
grader(submission_wrong)

# The default `grade_this_code()` `incorrect` message always adds code feedback,
# so be sure to remove \"{maybe_code_feedback()}\" from the incorrect message
grader <-
  # ```{r example-check}
  give_code_feedback(grade_this_code(incorrect = "{random_encouragement()}"))
# ```
grader(submission_wrong)
}
