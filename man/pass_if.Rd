% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graded.R
\name{pass_if}
\alias{pass_if}
\alias{fail_if}
\title{Signal a passing or failing grade if a condition is TRUE}
\usage{
pass_if(
  cond,
  message = NULL,
  ...,
  env = parent.frame(),
  praise = getOption("gradethis.pass.praise", FALSE),
  x = deprecated()
)

fail_if(
  cond,
  message = NULL,
  ...,
  env = parent.frame(),
  hint = getOption("gradethis.fail.hint", FALSE),
  encourage = getOption("gradethis.fail.encourage", FALSE),
  x = deprecated()
)
}
\arguments{
\item{cond}{A logical value or an expression that will evaluate to a \code{TRUE}
or \code{FALSE} value. If the value is \code{TRUE}, or would be considered \code{TRUE} in
an \verb{if (cond)} statement, then a passing or failing grade is returned to
the user.}

\item{message}{A character string of the message to be displayed. In all
grading helper functions other than \code{\link[=graded]{graded()}}, \code{message} is a template
string that will be processed with \code{\link[glue:glue]{glue::glue()}}.}

\item{...}{Passed to \code{\link[=graded]{graded()}} in \code{\link[=grade_this]{grade_this()}}.}

\item{env}{environment to evaluate the glue \code{message}. Most users of
\pkg{gradethis} will not need to use this argument.}

\item{praise}{Include a random praising phrase with \code{\link[=random_praise]{random_praise()}}? The
default value of \code{praise} can be set using \code{\link[=gradethis_setup]{gradethis_setup()}} or the
\code{gradethis.pass.praise} option.}

\item{x}{Deprecated. Replaced with \code{cond}.}

\item{hint}{Include a code feedback hint with the failing message? This
argument only applies to \code{fail()} and \code{fail_if_equal()} and the message is
added using the default options of \code{\link[=give_code_feedback]{give_code_feedback()}} and
\code{\link[=maybe_code_feedback]{maybe_code_feedback()}}. The default value of \code{hint} can be set using
\code{\link[=gradethis_setup]{gradethis_setup()}} or the \code{gradethis.fail.hint} option.}

\item{encourage}{Include a random encouraging phrase with
\code{\link[=random_encouragement]{random_encouragement()}}? The default value of \code{encourage} can be set
using \code{\link[=gradethis_setup]{gradethis_setup()}} or the \code{gradethis.fail.encourage} option.}
}
\value{
\code{pass_if()} and \code{fail_if()} signal a correct or incorrect grade if
the provided condition is \code{TRUE}.
}
\description{
\code{pass_if()} and \code{fail_if()} both create passing or failing grades if a given
condition is \code{TRUE}. See \code{\link[=graded]{graded()}} for more information on \pkg{gradethis}
grade-signaling functions.

These functions are also used in legacy \pkg{gradethis} code, in particular
in the superseded function \code{\link[=grade_result]{grade_result()}}. While previous versions of
\pkg{gradethis} allowed the condition to be determined by a function or
formula, when used in \code{\link[=grade_this]{grade_this()}} the condition must be a logical \code{TRUE}
or \code{FALSE}.
}
\section{Functions}{
\itemize{
\item \code{pass_if}: Pass if \code{cond} is \code{TRUE}.

\item \code{fail_if}: Fail if \code{cond} is \code{TRUE}.
}}

\examples{
# Suppose the prompt is to find landmasses in `islands` with land area of
# less than 20,000 square miles. (`islands` reports land mass in units of
# 10,000 sq. miles.)

grader <-
  # ```{r example-check}
  grade_this({
    fail_if(any(is.na(.result)), "You shouldn't have missing values.")

    diff_len <- length(.result) - length(.solution)
    fail_if(diff_len < 0, "You missed {abs(diff_len)} island(s).")
    fail_if(diff_len > 0, "You included {diff_len} too many islands.")

    pass_if(all(.result < 20), "Great work!")

    # Fall back grade
    fail()
  })
# ```

.solution <-
  # ```{r example-solution}
  islands[islands < 20]
# ```

# Peek at the right answer
.solution

# Has missing values somehow
grader(mock_this_exercise(islands["foo"], !!.solution))

# Has too many islands
grader(mock_this_exercise(islands[islands < 29], !!.solution))

# Has too few islands
grader(mock_this_exercise(islands[islands < 16], !!.solution))

# Just right!
grader(mock_this_exercise(islands[islands < 20], !!.solution))
}
\seealso{
Other grading helper functions: \code{\link[=graded]{graded()}}, \code{\link[=pass]{pass()}}, \code{\link[=fail]{fail()}},
\code{\link[=pass_if]{pass_if()}}, \code{\link[=fail_if]{fail_if()}}, \code{\link[=pass_if_equal]{pass_if_equal()}}, \code{\link[=fail_if_equal]{fail_if_equal()}}.
}
